name: Publish

on:
  push:
    branches:
      - main


permissions:
  contents: read
  id-token: write

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.15.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          registry-url: 'https://registry.npmjs.org'
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
      - run: pnpm audit
      - name: Configure npm authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cat <<EOF > ~/.npmrc
          //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
          //registry.npmjs.org/:always-auth=true
          EOF
      - name: Publish package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
      - name: Determine package version
        id: package_version
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check for existing release
        id: release_check
        run: |
          if gh release view "${{ steps.package_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub release
        if: steps.release_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.package_version.outputs.version }}
          name: ${{ steps.package_version.outputs.version }}
          generate_release_notes: true
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
